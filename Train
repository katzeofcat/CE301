#!/usr/bin/python
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
import os
import os.path
import numpy as np
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
#load data
(data_tr,lables_tr),(data_test,lables_test)=tf.keras.datasets.cifar10.load_data()
#normalization
data_tr=data_tr.astype('float32')/255
data_test=data_test.astype('float32')/255

model = tf.keras.Sequential()
#covlnet input 32x32x3
model.add(tf.keras.layers.Conv2D(
	filters=32, 
	kernel_size=[3,3], 
	padding='same', 
	activation='relu', 
	input_shape=(32,32,3))) 
#pooling input(32x32x32)
model.add(tf.keras.layers.MaxPooling2D(pool_size=(2,2)))
#covlnet2 input (16x16x32)
model.add(tf.keras.layers.Conv2D(
	filters=64, 
	kernel_size=[3,3], 
	padding='same', 
	activation='relu')) 
#pooling input(64x16x16)
model.add(tf.keras.layers.MaxPooling2D(pool_size=(2,2)))
#covlnet3
model.add(tf.keras.layers.Conv2D(
	filters=128, 
	kernel_size=[3,3], 
	padding='same', 
	activation='relu')) 
model.add(tf.keras.layers.MaxPooling2D(pool_size=(2,2)))
#FC
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(2048, activation='relu'))
model.add(tf.keras.layers.Dense(10, activation='softmax'))
model.summary()
model.compile(loss='sparse_categorical_crossentropy',
             optimizer='adam',
             metrics=['accuracy'])
callbacks = [keras.callbacks.TensorBoard(log_dir='/home/edgar/CE301../tb')]
model.fit(data_tr,lables_tr,
         batch_size=32,
         epochs=20,
	callbacks=callbacks)
model.save('/home/edgar/CE301../logs')
score = model.evaluate(data_test, lables_test, verbose=0)
print('\n', 'Test accuracy:', score[1])
#print("x_train shape:", data_tr, "y_train shape:", lables_tr)
#plt.imshow(data_test[30,:,:,:])
#plt.show()
